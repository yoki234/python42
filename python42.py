# -*- coding: utf-8 -*-
"""Python42.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dAeJHa8l37CfMUiy4gukR_ZbaAV06Rm8

# Команды ввода\вывода
"""

# комментарий
'''comment'''

#команда вывода print('message1','message2', end='что в конце', sep='знак отделения')
print('hello', 'World','!', sep='***') #\n(new_line, новая строка) \t(табуляция)

#команда ввода input()
# + любая буква(рекомендуется строчная), _ , цифра(НО не первая)
# пример хорошего нэйминга a, men32, user_name, _sum, max_
# - ",'+=@$/>...
var = input('Введите значение переменной ')
print(var)

"""# Литералы

##Типы данных
"""

# целочисленный integer int()
a = 50
b = 50_000
bin_ = 0b101010 # 0b - префикс двоичного числа
oct_ = 0o52 # 0o - префикс двоичного числа
hex_ = 0x2A # 0x - префикс двоичного числа
print(type(a), type(b), bin_, oct_, hex_, type(int('52')), int('101010',2))

# вещественные числа (числа с плавающей точкой) float, float()
a = 5.5
b = .7
print(a, b, type(a), type(b), float(4), 4.)

# cтроки string, str()
a = 'hello'
b = "world"
d = '42'
#print(a * 5, b, d + '11', type(a), type(d))
print(f'Мое {a} любимое число{42}')

# логический Boolean bool()
a = True
b = False
print(type(a), b)
print(bool(-8), bool('a'), bool([1]))
print(bool(0), bool(''), bool([]))

# None
d = None
print(d)

"""## Математические операторы"""

# Умножение
print(3 * 4)
print(3. * 4)
print(3. * 4.)
print('i'* 52)
print(False * 32)

# Сумма
print(3 + 4)
print(3. + 4)
print(3. + 4.6)
print('i' + '52')
print(True + 32)

# Разность
print(3 - 4)
print(3. - 4)
print(3. - 4.6)
print(True - 32)

# Частное
print(8 / 4)
print(3. / 4)
print(3. / 4.6)
print(True / 32)

# возведение в степень
print(8 ** 4)
print(3. ** 4)
print(3. ** 4.6)
print(3 ** 4.6)

# Деление без остатка
print(8 // 4)
print(9. // 4)
print(3. // 4.6)
print(True // 32)

# остаток от деления
print(8 % 4)
print(9. % 4)
print(3. % 4.6)
print(True % 32)
print(-12 % 10)
a = 3
a *= 2
a //= 3
a -= 1
print(a)

# Приоритетность действий
print(3 * (4 + 2) **3) # по правилам математики

"""зарезервированные слова


# Условный оператор
"""

#if условие:
#  инструкция1
#
#elif условие:
#  инструкция2
#else:
#  инструкция3

a = 52
if a > 50:
  print(1)
elif 30 < a < 50:
  print(2)
else:
  print(3)

# and ('И')
# or ('ИЛИ')
# not ('НЕ')
# == равно
# != не равно
# >, <, >=, <= больше меньше больше-равно меньше-равно
print('1 == 1', 1 == 1)
print('1 != 1', 1 != 1)
print('1 > 1', 1 > 1)
print('1 >= 1', 1 >= 1)
print(bool(1.6)) #True
print('True and True', True and True)
print('False and True', False and True)
print('False and False', False and False)

print('True or True', True or True)
print('False or True', False or True)
print('False or False', False or False)

print('not False', not False)

"""Человек уедет домой, если время до 21, есть билет или деньги и нет багаж"""

time = int(input())
ticket = True
many = False
baggage = True
if time < 21 and (ticket == True or many == True) and baggage == False:
  print('Go!')
else:
  print('No go!')

"""# Циклы"""

# while цикл с условие
n = 0
while n < 5:
  n += 1
  print(n)
print('end')

n = 2000
while True:
    n -= 1
    if n < 1:
        break
    print('Hello', 200/n)
print('end')

n = 0
while n < 10:
    n += 1
    print(n)
else:
    print('end')

#break
n = 0
while n < 10:
    n += 1
    if n == 8:
        break
    print(n)
else: # выполняется только в случае полного выполнения цикла
    print('end')

# for цикл - счетчик range(start, end, step)
for i in range(11):
  print(i)
  if i == 5: # изменение итерационной переменной
    break
else:# выполняется только в случае полного выполнения цикла
  print('end')

word = 'Hello, Python!'
for i in range(11, 0, -1): # отсчет от большего к меньшему
  print(word[i], word[i+ 1])

name = 'Joe'
for i in 'name':
  print(i)

#continue
a = 0
while a < 10:
  a += 1
  if a % 2 == 1:
    print('нечетное')
  else:
    continue
    print('четное')

"""# Исключения"""

while True:
  try:
    value = int(input('введите количество деталей'))
    box = int(input('введите количество коробок'))
    print(value/box)
  except:
    print('Ошибка!')

#пример иерархии
while True:
  try:
    value = int(input('введите количество деталей'))
    box = int(input('введите количество коробок'))
    print(value/box)
  except Exception:
    print('Введены неверные данные')
  except ZeroDivisionError:
    print('Нельзя разложить в 0 коробок!')

#пример вызова ошибки
while True:
  try:
    value = int(input('введите количество деталей'))
    box = int(input('введите количество коробок'))
    if value/box < 1:
        raise Exception
    print(value/box)
  except ZeroDivisionError:
    print('Нельзя разложить в 0 коробок!')
  except ValueError:
    print('Введены неверные данные!')
  except Exception:
    print('Ошибка счета')

#пример finally
while True:
  try:
    value = int(input('введите количество деталей'))
    box = int(input('введите количество коробок'))
    if value/box < 1:
        raise Exception
    print(value/box)
  except ZeroDivisionError:
    print('Нельзя разложить в 0 коробок!')
  except ValueError:
    print('Введены неверные данные!')
  except Exception:
    print('Ошибка счета')
  finally:
    print('Операция завершена')

#пример просмотра объекта
while True:
  try:
    value = int(input('введите количество деталей'))
    box = int(input('введите количество коробок'))
    if value/box < 1:
        raise Exception
    print(value/box)
  except (ZeroDivisionError):
    print('Нельзя разложить в 0 коробок!')
  #except ValueError:
  #  print('Введены неверные данные!')
  except Exception as ex:
    print('Ошибка счета', type(ex), ex)
  finally:
    print('Операция завершена')

"""# Строки"""

a = 'Hello'
b = "Python"
# строка индексируется слева-направо с 0, справа-налево с -1
print(a[0],a[1],a[2],a[3],a[4])
print(a[-1],a[-2],a[-3],a[-4],a[-5])
#print(a, type(b))

# срез substring [start:end:step]
a = 'Hello'
print(a[3:5:1]) # полный пример
print(a[3:5]) # без шага (с шагом 1)
print(a[0:3:1])
print(a[:3]) # от начала до 3
print(a[3:]) # от 3 до конца
print(a[::-1]) # переворот строки
print(a[-3:]) # срез с правого края

b = 2345
print(str(b)[::-1])
# перебор строки
c = 'Hello'
for i in c:
  print(i)
for i in range(len(c)):
  print(c[i])

# экранирование
print('начало\nконец')
print('книга \'Колобок\'')
print('книга \\Колобок')

"""## Методы для изменения регистра строки и содрежимого строки"""

#lower
name = input('input name')
if name.lower() == 'joe':
  print('Hello, master', name.lower())
else:
  print('Error')

#upper
name = input('input name')
if name.upper() == 'JOE':
  print('Hello, master', name.upper())
else:
  print('Error')

# capitalize делает первый символ строки заглавным остальные строчными
name = 'joe'
name2 = 'MARK'
print(name.capitalize(), name2.capitalize())

# title делает первые символы каждого слова в строке с заглавной буквы
a = 'hElLo, wORld!'
print(a.title())

# swopcase меняет регистры на противоположные
a = 'hElLo, wORld!'
print(a.swapcase())

word = 'друг'
new_word = ''
for i in word:
   print(i)
   if i == 'д':
    new_word += 'в'
   elif i == 'у':
    new_word += 'a'
   else:
    new_word += i
print(new_word)
# replace(что меняю, на что меняю, сколько раз)
word = word.replace('д','в')
word = word.replace('у','а')
print(word)
name = 'Cемен'
name = name.replace('е','э',1)
print(name)

"""## Методы поиска подстроки в строке"""

s = 'Hello, world!'
print(s.count('25')) # счетает количество вхождений
print(s.find('l')) # возвращает индекс первого вхождения
print(s.rfind('l')) # возвращает индекс последнего вхождения
print(s.index('o')) # возвращает индекс первого вхождения
print(s.rindex('o')) # возвращает индекс первого вхождения
#поиск отсутствующего символа
print(s.count('25'))
#print(s.find('25')) # -1 это отсутствия такой подстроки
#print(s.index('25')) # вызовет ошибку ValueError: substring not found

"""## Методы проверки начала и окончания строк"""

s = 'Hello, world'
print(s.endswith('d'))
print(s.endswith('g'))
#str.endswith(pattern [, startIndex [, endIndex]]) — определяет, заканчивается ли строка str указанным фрагментом pattern.

s = 'Hello, world'
print(s.startswith('H'))
print(s.startswith('g'))
#str.startwith(pattern [, startIndex [, endIndex]]) — определяет, начинается ли строка str с указанного фрагмента
#pattern.

"""## Методы проверки строк"""

a = '!'
b = 'Game23'
print(a.isalnum())
print(b.isalnum())
#str.isalnum() — проверяет, состоит ли строка str только
#из буквенных и цифровых символов.

a = '23'
b = 'Game'
print(a.isalpha())
print(b.isalpha())
print(a.isdigit())
print(b.isdigit())
#str.isalpha() — проверяет, состоит ли строка str только
#из буквенных символов.
#str.isdigit() — проверяет, состоит ли строка str только
#из цифровых символов (используется для проверки,
#является ли строка str числом).

a = 'Hello'
b = 'hello'
print(a.islower())
print(b.islower())
#str.islower() проверяет, находятся ли все буквенные символы строки str в нижнем регистре (символы строки
#str, которые не являются буквой алфавита — игнорируются данной проверкой).

a = 'HELLO'
b = 'HELLo'
print(a.isupper())
print(b.isupper())
#str.isupper() определяет, находятся ли все буквенные
#символы строки str в верхнем регистре.

a = 'Hello'
b = 'hello'
print(a.istitle())
print(b.istitle())
#str.istitle() проверяет, начинается ли каждое слово строки str с символа в верхнем регистре.

"""## Методы форматирования строк"""

a = 'Hello'
print(a.center(30))
print(a.center(30, '!'))
#str.center(width [, fillchar]) дополняет (расширяет) строку
#str до указанной длины width, возвращаемый результат — расширенная копия строки str. Если параметр
#fillchar указан, то он будет использован, как символ
#заполнения, иначе — отступы заполняются пробелами

a = '234'
print(a.zfill(10))
print(a.zfill(1))
#str.zfill(width) дополняет строку
#слева символами «0» ширины width

"""## Срезы"""

myStr="Python-cool!"
#str[start:end:step]
print(myStr[1:3]) #yt
print(myStr[-5:-2]) #coo
print(myStr[-5:11]) #cool
print(myStr[:6]) #Python
print(myStr[:-1]) #Python-cool
print(myStr[6:]) #-cool!
print(myStr[-5:]) #cool!
print(myStr[::-1]) # !looc-nohtyP

"""## Экранирование"""

print('Hello,\nWorld')
print('Hello,\tWorld')
print('\x23') # кодировка ascii (utf-8)
print('\\')

#Пользователь вводит с клавиатуры строку. Посчитайте количество цифр в строке. Выведите
#количество на экран.
s = 'fd45hgfhg65bvh4323vgdbg'
# 1 cпособ: перебрать символы и проверить, что они  цифры
count_ = 0
for c in s:
  if c.isdigit():
    count_ += 1
print(count_)
# 2 способ: подсчет методом count()
count_ = 0
for i in range(10):
  count_ += s.count(str(i))
print(count_)

#№Задание 3, 4
#Пользователь вводит с клавиатуры строку и символ
#для поиска. Посчитайте сколько раз в строке встречается
#искомый символ. Полученное число выведите на экран.
s = 'fd45hgfhg65bvh4323vgdbg' # тут должен быть input()
c = input('символ для поиска')
summ_1 = 0
for i in s:
  if i == c:
    summ_1 += 1
print(summ_1)
print(s.count(c))

#Задание 5
#Пользователь вводит с клавиатуры строку, слово для
#поиска, слово для замены. Произведите в строке замену
#одного слова на другое. Полученную строку отобразите
#на экране.
s = 'hello fd45 hgfhg 65 bv hello 4323vgdbg hello'
word_old = 'hello' #input()
word_new = 'python' #input()
s2 = '' #строка для нового содержимого
left_index = 0 # индекс левого края слова
right_index = 0# индекс правого края слова
for i in range(len(s)): # перебор символов
  if s[i] == ' ' or i == len(s) - 1: # если пробел
    left_index = right_index # сдвиг индексов слова
    right_index = i
    if s[left_index:right_index + 1].lstrip().rstrip() == word_old: # если слово для замены
        s2 += ' ' + word_new # новое слово
    else: # иначе
        s2 += s[left_index:right_index + 1].rstrip() # старое слово
s = s2.lstrip()
print(s)

"""## "Сырые" строки"""

print('Hello \n,World')
print(r'Hello {2 * 2 } \n,World')
print(rf'Hello {2 * 2 } \n,World')

"""## Форматирование вывода"""

login = 'SuperUser'
age = 13
print('Привет', login,'! Я знаю, что ', age,'тебе лет.')
print('Привет, {}! Я знаю, что {} тебе лет'.format( 13, 12, login))
print('Привет, {login}! Я знаю, что {age} тебе лет'.format(age = age, login = userLogin))

"""## Форматная строка"""

login = 'SuperUser'
age = 13
print(f'Привет, {login}! Я знаю, что {age} тебе лет', f'{2**5}')

"""## Модуль String"""

import string
print(string.ascii_letters, string.ascii_lowercase, string.ascii_uppercase)
# string.ascii_lowercase
# string.ascii_uppercase
print(string.digits, string.hexdigits, string.octdigits)
#string.hexdigits
#string.octdigits
print(len(string.punctuation))

# как получить алфавит кириллицы
for i in range(ord('А'), ord('А') + 32):
  print(chr(i), i)

# Генератор паролей
# длина пароля, выбор со знаками пунктуации или без
import string
import random
print('Генератор паролей')
len_password = int(input('Ведите длину пароля'))
choise = input('Использовать спецсимволы\n0-нет\n1-да')
password = ''
if choise == '0':
    char = (string.ascii_letters + string.digits)
    end = 62
else:
    char = (string.ascii_letters + string.digits + string.punctuation)
    end = 94
for i in range(len_password):
    password += char[random.randint(0,end)]
print(password)

"""## Регулярные выражения



***Изменяемость*** — над коллекцией допустимы операции
добавления новых и удаления существующих значений.


***Упорядоченность*** — каждый элемент коллекции характеризуется не только своим значением, но и индексом
(порядковым номером элемента в коллекции). С понятиями
индекса, индексацией и срезами мы уже познакомились
ранее при работе со строками.

***Уникальность*** — коллекция состоит из неуникальных (повторяющихся) элементов.
"""

s = 'fdfd'

listt = ['s',s,23, 43.9, 43, [21, 21]]
print(listt)
listt[0] = 43
print(listt[0], listt[:], listt[-1])

"""## Cоздание списка"""

#1
#category = ['Drama', 'Comedy', 'Fantasy']
#category2 = []
##2 с помощью функции list
#courses = list(('Math', 'Algorithms', 'Database'))
#courses2 = list()
#print(category)
#print(courses)
#d = [43, 34.6, 'Hello', True, [34, 'World'], 43]
#var = 'Hello'
#d = list(var)
#print(d)
#3 генератор списков
#newList = [выражение for элемент in последовательность]
#newList - имя генерируемого списка, выражение - выражение, которое
#выполняется над каждым элементом, элемент - элемент последовательности
#list1 = [i * 2 for i in range(10) if i % 2 == 0]
#print(list1)
#name = ['Anna', 'Joe', 'Mike', 'John']
#new_Name = [ i for i in name if i != 'Mike']
#print(new_Name)
#list3 = [[i for i in range(3)] for y in range(5)]
#print(list3)
from random import randint
num_ticket = [randint(1, 90) for i in range(15)]
print(num_ticket)

#TODO
for symb in ['.', '!', '?']:
    new_s = s.split(symb)
    print(new_s)
    for i in range(len(new_s)):
        if  i > 0 and i < len(new_s) - 1:
            new_s[i] = new_s[i].replace(new_s[i][1], new_s[i][1].upper(), 1)
    new_s = symb.join(new_s)
print(new_s)

"""##Индексация и срезы"""

d = [43, 34.6, 'Hello', True, [34, 'World'], 43, 657]
# Cрез
# имя_коллекции[начало:конец(без_учета):шаг]
print(d[1])
print(d[-1])
print(d[1:3])
print(d[::2])
print(d[len(d)-1])

"""## Функции списков"""

d = [43, 34.6, 43, 657]
print(len(d)) #4
print(max(d)) #657
print(min(d)) # 34.6
print(sum(d)) # 777.6
print(sorted(d)) # 34.6 43 43 657
print(sorted(d, reverse = False))
print(d)
d.sort()
print(d)

#Задание 2 Пользователь с клавиатуры вводит элементы списка целых и
# некоторое число. Необходимо посчитать сколько раз данное
#число присутствует в списке. Результат вывести на экран.
from random import randint
l = [ randint(1, 100) for i in range(50)]
print(l)
s = int(input('Введите число для поиска'))
#1
counter = 0 # объявление переменной для счета вхождения числа
for i in range(len(l)): # for i in l: цикл для перебора чисел из списка
  if s == l[i]: # if s == i: условие введенное число есть в списке
    counter += 1
print(counter)

#Задание 3 Пользователь с клавиатурывводит элементы списка целых.
#Необходимо посчитать сумму всех элементов и их среднеарифметическое.
#Результаты вывести на экран.
from random import randint
l = [ randint(1, 10) for i in range(10)]
print(l)
#1
summ = 0
counter = 0
for i in l: # for i in range(len(l))
  summ += i
  counter += 1
print(summ, summ / counter)
#2
print(sum(l), sum(l)/len(l))

list_ = ['a', 'ab', 'bb', 'ac', 4]
list2 = ['a', 'ab', 'bb', 'ac']
print(sorted(l))

"""## Методы списков"""

category = ['Drama', 'Comedy', 'Fantasy']
# добавление
category.append('Anime')
print(category)
category.insert(1, 'Horror') #insert(индекс_куда_добавить, Что_добавить)
print(category)

# удаление
category.pop(1) #pop(индекс_удаляемого)
print(category)
category.append('Comedy')
category.remove('Comedy')
print(category)
category2 = category.copy()
category2.clear()
print(category2)
# индексация
print(category)
print(category.index('Anime'))
# подсчет вхождений
print(category.count('Anime'))

category = ['Drama', 'Comedy', 'Fantasy']
category2 = category
category2.append('Crime')
print(category)
print(category2)
print(category is category2)

#category2 = category.copy()
#print(category is category2)
category2 = category[:]
print(category is category2)

a = 5
b = a
b -= 1
print(b)

"""## Матрица (список в списке)"""

# Матрица (список в списке)
from random import randint
list_matrix = [[randint(1,10) for x in range(5)] for y in range(5)]
print(list_matrix)
for i in list_matrix:
  for y in i:
    print(y, end=' ')
  print(' ')
print(list_matrix[1][2])

"""Создать журнал для 4 студентов, у каждого студента записано имя и 4 оценки, найти среднюю оценку каждого студента"""

journal = [['Joe', 6, 10 , 6, 8], ['Max', 12, 10 , 4, 5, 9, 8], ['Anna', 6, 7 , 6, 4], ['Lee', 12, 11 , 12, 11]] # список
for student in journal: # перебор студентов
  print(student)
  summ = 0 # для суммы оценок
  count = 0 # для количества оценок
  for i in range(len(student)): #перебор оценок студента
    if i > 0: # условие, что это не имя , не [0] элемент
      summ += student[i] # сумма оценок
      count += 1 # количество оценок
  print(student[0], summ / count) #вывод имени и среднего балла

"""#Функции

## Базовые определения
"""

#Функция
def name_function(a, b):
  if a > b:
    return f'Max {a}'
  elif b > a:
    return f'Max {b}'
  else:
    return 'Equiv'
print(name_function(21, 12))
#
print(name_function(34, 43))
#
print(name_function(55, 55))

# Процедуры
def my_alarm():
  print('ПРЕДУПРЕЖДЕНИЕ!')

for i in range(50, 71):
  print(i)
  if i > 60:
    print(my_alarm())
print('Набор скорости завершен')

"""##Параметры

### Позиционный
"""

# Функция подсчета периметра 4х угольника
def p(a, b):
  return (a + b) * 2
print(p(3, 4))

"""### Именованные параметры"""

def f(passport=False, visa=False):
  if passport:
    if visa:
      return 'Вы прошли контроль'
    else:
      return 'Вы не прошли контроль из-за визы'
  else:
    return 'Вы не прошли контроль из-за паспорта'
print(f(passport=True, visa=True))
print(f(passport=True))
print(f())
print(f(True, True))

"""### Неизвестное количество параметров"""

def aver(*value):
  summ = 0
  for i in value:
    summ += i
  print(summ / len(value))
#распаковка
a = [4, 5, 4]
print(*a)
#aver(4,5,3)
#aver(3, 3, 3 , 3, 3, 3)

#Напишите функцию, которая отображает на экран
#форматированный текст, указанный ниже:
#“Don't let the noise of others' opinions drown
#out your own inner voice.”
#                           Steve Jobs
def f():
  print("\"Don't let the noise of others' opinions drown\nout your own inner voice\".\n\t\tSteve Jobs")
f()

#Напишите функцию, которая принимает два числа
#в качестве параметра и отображает все нечетные числа
#между ними.
def f(a, b):
  for i in range(a, b + 1):
    if i % 2 > 0:
      print(i)
f(3, 7)

#Напишите функцию, которая отображает горизонтальную или вертикальную линию из некоторого символа.
#Функция принимает в качестве параметра: длину линии,
#направление, символ.
#def f(lenght, direction, symbol):
#  if direction == 'v':
#    for i in range(lenght):
#      print(symbol)
#  else:
#    print('$' * lenght)

def f(lenght, direction, symbol):
  for i in range(lenght):
    if direction == 'v':
      print(symbol)
    else:
      print(symbol, end='')

menu = input('Введите количество,\nнаправление (v-вертикально, h-горзонтально) и\n символ через пробел')
menu = menu.split(' ')
f(int(menu[0]), menu[1], menu[2])

"""## Глобальные и локальные переменные"""

# локальные переменные
def f(a, b):
  summ = a + b
  return summ
a = 5
b = 10
print(a, b)
print(f(a, b))
# print(summ) локальная переменная

def f(a, b):
  summ = a + b + c
  return summ
a = 5
b = 10
c = 20 # глобальная переменная
print(f(a, b))

#glabal
def f(a, b):
  global c
  c = a + b
  return c
a = 5
b = 10
c = 2 # глобальная переменная
print(f(a, b), c)

# nonlocal
def nl():
  a = 1
  def loc():
    global b
    nonlocal a
    print(f'Локальный:{a},{b}')
  return print(f'Нелокальный: {a}'), loc()
a = 0
b = 0
nl()
print(a, b)

#Задание 4
#Напишите функцию, которая возвращает максимальное из четырёх чисел. Числа передаются в качестве
#параметров.
def f(a, b, c, d):
  return max([a, b, c, d])
print(f(12, 7, 10, 1))

#Напишитефункцию, которая возвращает сумму чисел
#в указанном диапазоне. Границы диапазона передаются
#в качестве параметров.
def f(a, b):
  summ = 0
  for i in range(a, b + 1):
    summ += i
  return summ
print(f(1, 7))

# Напишите функцию, которая проверяет является ли
#число простым. Число передаётся в качестве параметра.
#Если число простое нужно вернуть из метода true, иначе
#false.
def f(n):
    for i in range(2, n):
        if n % i == 0:
            return False
    return True
print(f(8))
print(f(11))

#Напишите функцию, которая проверяет является
#ли шестизначное число «счастливым». Число передаётвернуть из функции true, иначе false.
#«Счастливое шестизначное число» — это число у которого сумма первых трёх цифр равна сумме трёх вторых
#цифр. Например, 123420 – счастливое
def f(n): #функция проверки счастья
    l3, r3 = str(n)[:3], str(n)[3:] # деление 6ти значного на 2 по 3
    if sum_digit(l3) == sum_digit(r3): # проверка счастья
        return True
    else:
        return False

def sum_digit(s): #функция подсчета суммы цифр в числе
    return int(s[0]) + int(s[1]) + int(s[2])

print(f(123420))
print(f(183420))

"""## Оператор yield"""

#1 функция вывода натуральных чисел от 1 до n
def render(n):
  for i in range(1, n + 1):
    return str(i)
s = ''
s += render(5)
print(s)

def render2(n):
  for i in range(1, n + 1):
    yield str(i)
s = ''
for i in render2(5):
  s += i
print(s)
l = [i for i in render2(5)]
print(l)

#2 функция для вывода ряда квадратов от 1 до n
def pow_2(n): # объявление функции
  for i in range(1, n + 1): # цикл натуральных чисел от 1 до n
    yield i ** 2 # многократный возврат квадрата числа
list_power = [i for i in pow_2(10)] #использование функции как генератора
print(list_power) # вывод

# написать функцию поиска первых n чисел фибоначчи
def fib(n):
  a = 1
  b = 1
  for i in range(n - 2):
    p = a + b
    a = b
    b = p
    yield p
list_fib = [1, 1] + [i for i in fib(20)]
print(list_fib)

"""## Рекурсия"""

# создать функцию, которая считает сумму всех натуральных чисел до числа n
# 10 - 10+9+8+7+6+5+4+3+2+1
def summ_num(n):
    if n == 1:
        return 1
    else:
        return n + summ_num(n - 1)
print(summ_num(20))

#функция подсчет факториала
def fact(n):
    if n == 1:
        return 1
    else:
        return n * fact(n - 1)
print(fact(5))

# написать функцию поиска первых n чисел фибоначчи
def fib(n, a = 0, b = 1):
  if n == 1:
    return str(b)
  else:
    return str(b) + ' ' + fib(n - 1, b, a + b)

print(fib(10))

#Задание 1
#Написать рекурсивную функцию нахождения числа n степени x.
def f(n , x):
    if x == 1:
        return n
    else:
        return n * f(n, x - 1)


#Задание 2
#Написать рекурсивную функцию, которая вычисляет
#сумму всех чисел в диапазоне от a до b.
# Пользователь вводит a и b.
def summ_num(a, b): # 3 7
    if a == b:
        return b
    else:
        return b + summ_num(a, b -1) # 6

#Задание 3
#Написать рекурсивную функцию, которая выводит N
#звезд в ряд, число N задает пользователь.
# Проиллюстрируйте работу функции примером.
def f(n):
    if n == 1:
        return '*'
    else:
        return '*' + f(n - 1)
print(f(4))

#Задание 5
#Напишите рекурсивную функцию, которая принимает
# список из 100 целых чисел, полученных случайным
#образом, и находит позицию, с которой начинается
# последовательность из 10 чисел, сумма которых минимальна.
from random import randint
rand_list = [randint(1,10) for i in range(10)]
print(rand_list)
def summ_num(indx_l, indx_r):
    if indx_l == indx_r:
        return rand_list[indx_l]
    else:
        return rand_list[indx_l] + summ_num(indx_l + 1, indx_r)

summ_list = []
for i in range(len(rand_list) - 2):
    print(summ_num(i, i + 2))
    summ_list.append(summ_num(i, i + 2))
print('min_Summ', min(summ_list))
print('index_min_Summ', summ_list.index(min(summ_list)))

#Задание 6
#Написать функцию, которая принимает две даты
#(т.е. функция принимает шесть параметров) и вычисляет
#разность в днях между этими датами. Для решения этой
#задачи необходимо также написать функцию, которая
#определяет, является ли год високосным.
def delta(d1, m1, y1, d2, m2, y2):
    list_m = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    h_y = 0
    for i in range(y1, y2):
        if (i % 4 == 0 and i % 100 != 0) or i % 400 == 0:
             h_y +=1
    delta1 = y1 * 365 + sum(list_m[:m1]) + d1
    delta2 = y2 * 365 + sum(list_m[:m2]) + d2
    return delta2 - delta1 + h_y
print(delta(23,1,2024, 23, 1, 2025))

"""#Модули"""

# модуль math
import math
for i in dir(math):
  print(i)
# некоторые объекты модуля
#sin(x) → синус x;
#cos(x) → косинус x;
#tan(x) → тангенс x.
#pi → константа со значением, приближенным к π;
#radians(x) → функция, которая преобразует x из градусов в радианы;
#degrees(x)  → действие в  обратном направлении (от
#радианов к градусам).
#e  → константа со значением, которое приближено
#к числу Эйлера (e);
# exp(x) → нахождение значения ex
# log(x) → натуральный логарифм x;
# log(x, b) → логарифм x по основанию b;
# log10(x)  → десятичный логарифм x (более точный,
#чем log(x, 10));
# log2(x) → двоичный логарифм x (более точный, чем
# log(x, 2));
# pow(x, y) → нахождение значения xy
# (обратите внимание на области определения)
# ceil(x) → верхнее округление x (наименьшее целое число, больше или равное x);
# floor(x)  → нижнее округление x (наибольшее целое
#число, меньше или равное x);
#23
#Полезные модули
#■ trunc(x) → значение x, усеченное до целого числа (будьте
#осторожны — оно не эквивалентно ни верхнему ни
#нижнему округление);
#■ factorial(x) → возвращает x! (x должен быть целым и не
#отрицательным);
#■ hypot(x, y) → возвращает длину гипотенузы прямоугольного треугольника с длинами катетов, равными
#x и y (аналогично sqrt(pow(x, 2) + pow(y, 2)) , но более
#точно).

"""## Способы импорта модуля"""

# 1
import math
print(math.sin(math.pi/2))

# 2
from math import exp
print(exp(1), floor(3.5))

from math import ceil, floor
print(ceil(3.5), floor(3.5))

# 3
from math import*
print(pow(2,7))
print(ceil(3.5), floor(3.5))

# псевдоним
from math import factorial as f
print(f(5), factorial(5))

import random
for i in dir(random):
  print(i)

# игра Висилица
# игра Висилица
from random import choice

def start(list_words):
  random_word = choice(list_words)
  return random_word

def render(random_word):
    word = ''
    for i in random_word:
        word += '_ '
    return word

def check_win(lives, play_word):
    if lives < 1:
        print('Loose!')
        return False
    elif '_' not in play_word:
        print('WIN! CONGRATULATIONs!')
        return False
    else:
        return True

def game(random_word, play_word, lives):
    use_letter = ''
    while True:
        print('Загадано слово:', play_word, f'Жизней осталось {lives}', sep='\n')
        letter = input('Введите букву')
        if letter in use_letter:
            print("Эту букву уже называли!")
        else:
            use_letter += letter
            if letter in random_word:
                new_play_word = ''
                for i in range(len(random_word)):
                    if random_word[i] == letter:
                        new_play_word += letter + ' '
                    else:
                        new_play_word += play_word[i * 2] + ' '
                play_word = new_play_word
                random_word = random_word.replace(letter, '_')
                print('Есть такая буква!', play_word, sep='\n')
            else:
                lives -= 1
                print('Нет такой буквы. Жизней осталось', lives)
        if check_win(lives, play_word) == False:
            break
    print('GAME OVER')

list_words = ['tiger', 'cat', 'pig', 'dog', 'pinguine', 'elephant', 'turtle']
lives = 3
random_word = start(list_words)
play_word = render(random_word)
game(random_word, play_word, lives)

"""#"Магические" функции"""

num_list = ['2', '3', '4', '5']
# map
new_num_list = list(map(int, num_list))
print(new_num_list)
# lambda
for i in map(lambda x: x ** 3, new_num_list):
  print(i)
l = [1000, 900]
l2 = [900,600]
summ = list(map(lambda x, y: x + y * 1.2, l, l2))
print(summ)

"""# Краткий обзор замыкания"""

def out_f():
  var = 1
  def in_f():
    return var
  return in_f()

my_var = out_f()
print(my_var)

"""# Сортировка и поиск

##Сортировка пузырьком
"""

# пузырьковая сортировка
array = [4, 12, 7, 2, 10, 5]
for i in range(len(array)):
    for y in range(len(array)):
        if array[i] < array[y]:
            array[i], array[y] = array[y], array[i]
            print(array)

"""## Сортировка вставкой"""

# сортировка методом вставок
for i in range(1, len(array)):
    for y in range(i, 0, -1):
        if array[y] > array[y - 1]:
            array[y], array[y - 1] = array[y - 1], array[y]
            print(array)

"""## Задача"""

#Есть список целых. Необходимо первую половину
#списка отсортировать по убыванию, вторую половину
#по возрастанию.
for i in range(len(array)//2):
    for y in range(len(array)//2):
        if array[i] > array[y]:
            array[i], array[y] = array[y], array[i]
for i in range(len(array)//2, len(array)):
    for y in range(i, len(array)//2, -1):
        if array[y] < array[y - 1]:
            array[y], array[y - 1] = array[y - 1], array[y]
print(array)

# сортировать числа по возрастанию. Сначала идут числа заканчивающиеся 1, потом 2 и т.д.
for i in range(1, len(array)):
    for y in range(i, 0, -1):
        if array[y] % 10 < array[y - 1] % 10:
            array[y], array[y - 1] = array[y - 1], array[y]
        elif array[y] < array[y - 1] and array[y] % 10 == array[y - 1] % 10:
            array[y], array[y - 1] = array[y - 1], array[y]
print(array)

"""## Метод сортировки слияния"""

#метод сортировки слиянием
def split_array(array): # функция деления списка на элементарные части
    l1 = array[:len(array) // 2] #левое число
    l2 = array[len(array) // 2:] #правое число
    if len(l1) > 1: # делим пока в списке останется одно число
        l1 = split_array(l1)
    if len(l2) > 1: # делим пока в списке останется одно число
        l2 = split_array(l2)
    return sorted_merge(l1, l2) # отправляем числа на сравнение(сортировку) и слияние

def sorted_merge(l1, l2): # функция сортировки и слияния
    result_list = [] # итоговый список с сортировкой
    i = 0 #индекс левого подсписка
    y = 0 #индекс правого подсписка
    while i < len(l1) and y < len(l2): # пока индекс есть в одном из подсписков
        if l1[i] < l2[y]: # условие если i-ый элемент левого подсписка меньше y-го правого
            result_list.append(l1[i]) #i-ый элемент левого подсписка
            i += 1 # сдвигается индексация правого подсписка
        else:# иначе то же для левого
            result_list.append(l2[y])
            y += 1
    result_list += l1[i:] + l2[y:] # добавляется четвертое (максимальное оставшееся) в резалт
    return result_list
print(array)
print(split_array(array))

"""## сортировка Шелла"""

# сортировка Шелла
array = [4, 12, 7, 2, 10, 5, 8]
def shell(sort_list):
    len_l = len(sort_list)
    mid = len_l // 2
    while mid > 0:
        for elem in range(mid, len_l):
            current_elem = sort_list[elem]
            indx = elem
            while indx >= mid and sort_list[indx - mid] < current_elem:
                sort_list[indx] = sort_list[indx - mid]
                indx -= mid
                sort_list[indx] = current_elem
        mid //= 2
    return sort_list

"""##Cортировка пирамидальная"""

# пирамидальная сортировка
array = [4, 12, 7, 2, 10, 5, 8]
def b_tree(array, upper, i):
    while True:
        l, r = i * 2 + 1, i * 2 + 2
        if max(l, r) < upper: #1
            if array[i] >= max(array[l], array[r]):
                break
            elif array[l] > array[r]:
                swap(i, l) #array[i], array[l] = array[l], array[i]
                i = l
            elif array[l] < array[r]:
                swap(i, r) #array[i], array[r] = array[r], array[i]
                i = r
        elif l < upper:
            if array[l] > array[i]:
                swap(i , l)
                i = l
            else:
                break
        elif r < upper:
            if array[r] > array[i]:
                swap(i , r)
                i = r
            else:
                break
        break

def swap(i , child):
    array[i], array[child] = array[child], array[i]

def heap_sort(array):
    for y in range((len(array) - 2)//2, -1, -1):
        b_tree(array, len(array), y)
    for w in range((len(array) - 1), 0, -1):
        swap(w, 0)
        b_tree(array, w, 0)
    return array

heap_sort(array)
print(heap_sort(array))

"""## быстрая **сортировка**"""

#быстрая сортировка
from random import randint
array = [4, 12, 7, 2, 10, 5, 8]
def quik_sort(array):
    if len(array) > 1:
        n = array[randint(0, len(array) - 1)]
        list_min = [elem for elem in array if elem < n]
        list_equil = [elem for elem in array if elem == n]
        list_max = [elem for elem in array if elem > n]
        list_result = quik_sort(list_max) + quik_sort(list_equil) + quik_sort(list_min)
    else:
        list_result = array
    return list_result
print(quik_sort(array))

"""Есть стопка оладий различного радиуса. Единственная
операция, проводимая с ними — между любыми двумя
суем лопатку и меняем порядок оладий над лопаткой
на обратный. Необходимо за минимальное количество
операций таких отсортировать снизу вверх по убыванию
радиуса
"""

#from random import randint

array = [randint(1,100) for i in range(10)]
print(array)
def check_sort(list):
    for i in range(len(list) - 1):
        if list[i] >= list[i + 1]:
            pass
        else:
            return False
    return True

def search_max(list):
    maxx = 0
    for i in list:
        if i > maxx:
            maxx = i
    return maxx

def rotate(list):
    return list[::-1]
index_sorted = 0
while check_sort(array) == False:
    maxx = search_max(array[index_sorted:])
    array =  array[:array.index(maxx)] + rotate(array[array.index(maxx):])
    array = array[:index_sorted] + rotate(array[index_sorted:])
    index_sorted += 1
    print(index_sorted, array)
print(array)

"""## Линейный поиск"""

#линейный
from random import randint
count = 0
index_list = []
array = [randint(1,5) for i in range(10)]
print(array)
num = int(input('Введи число'))
for i in range(len(array)):
    if array[i] == num:
        count += 1
        index_list.append(i)
if count > 0:
    print(f'найденных чисел {count} шт,индекс: {index_list} ')
else:
    print('Таких чисел нет')

"""## Бинарный поиск"""



"""# Кортеж tuple"""

my_list = [23, 23.45, "23", True, [23, 23]]
print(my_list)
my_list[0] = 32
print(my_list)
# создание кортежа
my_list = tuple(my_list)
print(my_list)
my_tuple = (23, 43, 65)
print(my_tuple)
# изменение кортежа
my_list[4][0] = 32
print(type(my_list))
# одноэлементный кортеж
singl_elem = (3, )
print(type(singl_elem))
# распаковка
*elem1, elem2 = my_tuple
#elem1, *elem2 = my_tuple
print(elem1, elem2)
#конкантенация объединение и повторение
result = my_list + my_tuple
result2 = my_list * 3
print(result, result2)

# преобразование в список
print(result, list(result))

#Пользователь вводит с клавиатуры название фрукта.
#Необходимо вывести на экран количество раз, сколько
#фрукт встречается в кортеже в качестве элемента.
fruit_tuple = ('apple', 'mango', 'banana', 'lemon', 'avocado', 'mango', 'banana', )
fruit = input('введите название фрукта')
cnt = 0
for f in fruit_tuple:
    if f == fruit:
        cnt += 1
print(cnt)

#Добавьте к заданию 1 подсчет количества раз, когда
#название фрукта является частью элемента. Например:
#banana, apple, bananamango, mango, strawberry-banana.
#В примере выше banana встречается три раза.
fruit_tuple = ('banana', 'apple', 'bananamango', 'mango', 'strawberry-banana')
fruit = 'banana' #input('введите название')
cnt = 0
for f in fruit_tuple:
    if fruit in f:
        cnt += 1
print(cnt)

#Есть кортеж с названиями производителей автомобилей (название производителя может встречаться от 0
#до N раз). Пользователь вводит с клавиатуры название
#производителя и слово для замены. Необходимо заменить
#в кортеже все элементы с этим названием на слово для
#замены. Совпадение по названию должно быть полным.
cars_tuple = ('BMW', 'KIA', 'TESLA', 'AUDI', 'AURUS') * 3
old_car = 'KIA' #input('кого заменить')
new_car = 'LADA' #input('на кого заменить')
def change_car(tuple_, old, new):
    tuple_ = list(tuple_)
    for indx_car in range(len(tuple_)):
        if tuple_[indx_car] == old:
            tuple_[indx_car] = new
    tuple_ = tuple(tuple_)
    return tuple_
print(cars_tuple)
print(change_car(cars_tuple, old_car, new_car))

#Есть кортеж с целыми числами. Нужно вывести статистику по
#количеству цифр в элементах кортежа. Например:
#■ 1 цифра — 3 элемента;
#■ 2 цифры — 4 элемента;
#■ 3 цифры — 5 элементов.
tuple_ = (23, 345, 24324, 54, 5424, 432, 53424543, 567)
lenght_list = []
count_list = []
list_ = list(tuple_)
dotn = 1
#print('начало while')
while list_ != []:
    for digit in list_:
        if len(str(digit)) == dotn:
            count_list.append(dotn)
            if dotn not in lenght_list:
                lenght_list.append(dotn)
            list_.remove(digit)
            print(list_)
        if len(list_) == 1:
            if len(str(list_[0])) == dotn:
                count_list.append(dotn)
                if dotn not in lenght_list:
                    lenght_list.append(dotn)
                list_ = []
    dotn += 1
    print(list_, dotn)
#print('конец w')
for i in lenght_list:
    print(f'{i} значных чисел {count_list.count(i)} шт')

"""## ## Множество"""

my_list = [True, False, True, 'True', 1]
print(my_list) # список
my_list = set(my_list)
print(my_list)# множество
# индексация
#print(my_list[0])
#for i in range(1000):
#    for y in my_list:
#        print(y, end='')
#    print()
#добавление и удаление
my_list.add(34)
my_list.remove('True')
for i in range(1000):
    for y in my_list:
        print(y, end='')
    print()
#объединение
my_set = {23, 32, 34, 1}
print(my_list & my_set)
print(my_list | my_set)
print(my_list ^ my_set)

"""##Cловари"""

#Словари
#cоздание словаря
my_dict = {'name': 'Joe', 'age':67, 'weight': 67, 0 : 0}
print(my_dict)
print(my_dict['name']) # получение value по key
print(my_dict.keys()) # получение списка ключей key
print(my_dict.values()) # получение списка значений values
print(my_dict.items()) # получение пары ключей key и  значений values
color_dict = {'red':'красный', 'green': 'зеленый', 'grey':'серый', 'black':'черный' }
print('red' in color_dict)
print('красный' in color_dict)
# методы возрата значений
print(color_dict.get('red', 'КЛЮЧА НЕТ')) # возвращает значение по ключу
print(color_dict)
print(color_dict.setdefault('white', 'КЛЮЧА НЕТ')) #возвращает значение по ключу, а при отсутствии добавляет ключ со значением
print(color_dict)
#изменение  словаря
color_dict.update(my_dict) # объединение словарей
color_dict['white'] = 'белый' # добавление по ключу key
del(color_dict['age']) # удаление по ключу key
clone_dict = color_dict.copy() # копирование словаря
color_dict['yellow'] = 'жёлтый'
print(color_dict, clone_dict)

"""англо-русский словарь"""

from os import strerror

def main():
    dict_word = dict_loader()
    while True:
        word = input('Введите слово, или 0 для выхода').lower()
        if word == '0':
            break
        search_word(word, dict_word)


def search_word(word, dict_word):
    if word in dict_word:
        print(f'{word} - {dict_word[word]}')
    else:
        print('слово не найдено')
        choice = input('Введите 1, если хотите добавить слово с переводом в словарь')
        if choice == '1':
            eng = input('введите слово на английском')
            ru = input('введите слово на русском')
            word_add(eng, ru, dict_word)
search_word('cat', {'cat':'кот'}) # тест функции

def dict_loader():
    try:
        dict_word = {}
        with open('text.txt', 'r', encoding='utf-8') as file:
            for i in file:
                eng, ru = i.split(',')
                dict_word[eng] = ru.strip()
                dict_word[ru.strip()] = eng
        return dict_word
    except IOError as e:
        print(strerror(e.errno))
print(dict_loader()) # тест функции

def word_add(eng, ru, dict_word):
    dict_word[eng] = ru.strip()
    dict_word[ru.strip()] = eng
    try:
        with open('text.txt', 'a', encoding='utf-8') as dict:
            dict.write(f'{eng}, {ru}\n')
        return dict_word
    except IOError as e:
        print(strerror(e.errno))
#word_add('apple', "яблоко", {}) # тест функции

main()